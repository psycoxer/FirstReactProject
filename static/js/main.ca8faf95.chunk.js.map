{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","Component","Counter","style","display","alignItems","type","placeholder","onChange","event","props","counter","target","value","this","changeButtonClass","formatted","onClick","onIncrease","onDelete","id","warnin","Counters","state","counters","text","existed","handleDelete","counterId","updatedCounters","filter","c","setState","handleIncrease","index","indexOf","handleReset","map","handleAdd","cexisted","push","handleChange","changedCounter","handlePrint","seperatorr","finalArray","console","log","currentCounter","join","hiddenElement","document","createElement","encodeURI","download","click","remove","current","key","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iQAceA,E,uKAVX,OACE,yBAAKC,UAAU,gCACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,e,GAJaC,a,8BC6CNC,E,uKA5CH,IAAD,OACP,OACE,yBACEC,MAAK,2BAAO,CAAEC,QAAS,SAAa,CAAEC,WAAY,WAClDN,UAAU,OACV,2BACEO,KAAK,OACLP,UAAU,mBACVQ,YAAY,OACZC,SAAU,SAACC,GAAD,OACR,EAAKC,MAAMF,SAAS,EAAKE,MAAMC,QAASF,EAAMG,OAAOC,UAGzD,0BAAMd,UAAWe,KAAKC,qBAAsBD,KAAKE,aACjD,4BACEjB,UAAU,2BACVkB,QAAS,kBAAM,EAAKP,MAAMQ,WAAW,EAAKR,MAAMC,WAFlD,OAKA,4BACEZ,UAAU,4BACVkB,QAAS,kBAAM,EAAKP,MAAMS,SAAS,EAAKT,MAAMC,QAAQS,MAFxD,a,0CAUJ,IAAIC,EAAS,mBAEb,OADAA,GAAuC,IAA7BP,KAAKJ,MAAMC,QAAQE,MAAc,UAAY,Y,kCAI5C,IACHA,EAAUC,KAAKJ,MAAMC,QAArBE,MACR,OAAc,IAAVA,EACK,OAEAA,M,GAxCSZ,aCuGPqB,E,4MArGbC,MAAQ,CACNC,SAAU,CAAC,CAAEJ,GAAI,EAAGP,MAAO,EAAGY,KAAM,KACpCC,QAAS,G,EAiCXC,aAAe,SAACC,GACd,IAAMC,EAAkB,EAAKN,MAAMC,SAASM,QAC1C,SAACC,GAAD,OAAOA,EAAEX,KAAOQ,KAElB,EAAKI,SAAS,CAAER,SAAUK,K,EAG5BI,eAAiB,SAACtB,GAChB,IAAMkB,EAAe,YAAO,EAAKN,MAAMC,UACjCU,EAAQL,EAAgBM,QAAQxB,GACtCkB,EAAgBK,GAAhB,eAA8BvB,GAC9BkB,EAAgBK,GAAOrB,QACvB,EAAKmB,SAAS,CAAER,SAAUK,K,EAG5BO,YAAc,WACZ,IAAMP,EAAkB,EAAKN,MAAMC,SAASa,KAAI,SAACN,GAE/C,OADAA,EAAElB,MAAQ,EACHkB,KAET,EAAKC,SAAS,CAAER,SAAUK,K,EAG5BS,UAAY,WACV,IAAMC,EAAW,EAAKhB,MAAMG,QACtBG,EAAe,YAAO,EAAKN,MAAMC,UACvCK,EAAgBW,KAAK,CACnBpB,GAAImB,EAAW,EACf1B,MAAO,IAET,EAAKmB,SAAS,CAAER,SAAUK,EAAiBH,QAASa,EAAW,K,EAGjEE,aAAe,SAACC,EAAgBjB,GAC9B,IAAMI,EAAe,YAAO,EAAKN,MAAMC,UACjCU,EAAQL,EAAgBM,QAAQO,GACtCb,EAAgBK,GAAhB,eAA8BQ,GAC9Bb,EAAgBK,GAAOT,KAAOA,EAC9B,EAAKO,SAAS,CAAER,SAAUK,K,EAG5Bc,YAAc,WACZ,IAAMC,EAAa,+PACfC,EAAa,CAAC,eAAgBD,EAAa,MAC/CE,QAAQC,IAAI,EAAKxB,MAAMC,UAHL,oBAIW,EAAKD,MAAMC,UAJtB,IAIlB,2BAAkD,CAAC,IAAxCwB,EAAuC,QAC5CA,EAAevB,MAAQuB,EAAenC,QACxCgC,EAAWL,KACT,CAACQ,EAAenC,MAAO,KAAM,IAAMmC,EAAevB,KAAM,MAAMwB,KAAK,KAErEJ,EAAWL,KAAKI,EAAa,QATf,8BAYlBE,QAAQC,IAAIF,EAAWI,KAAK,KAE5B,IAAIC,EAAgBC,SAASC,cAAc,KAE3CF,EAAclD,KACZ,wBAA0BqD,UAAUR,EAAWI,KAAK,KACtDC,EAActC,OAAS,SACvBsC,EAAcI,SAAW,mBACzBJ,EAAcK,QACdL,EAAcM,U,uDA7FN,IAAD,OACP,OACE,6BACE,wBAAIzD,UAAU,OAAd,iBACA,4BACEA,UAAU,6BACVkB,QAASH,KAAKsB,aAFhB,kBAKCtB,KAAKS,MAAMC,SAASa,KAAI,SAACoB,GAAD,OACvB,kBAAC,EAAD,CACEC,IAAKD,EAAQrC,GACbD,SAAU,EAAKQ,aACfhB,QAAS8C,EACTvC,WAAY,EAAKe,eACjBzB,SAAU,EAAKiC,kBAGnB,4BAAQ1C,UAAU,6BAA6BkB,QAASH,KAAKwB,WAA7D,KAGA,6BACA,4BACEvC,UAAU,yCACVkB,QAASH,KAAK6B,aAFhB,c,GA3Be1C,aCaR0D,MAXf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,0BAAM7D,UAAU,aACd,kBAAC,EAAD,SCEY8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASkB,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.ca8faf95.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\".\">\r\n          Reload\r\n        </a>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{ ...{ display: \"flex\" }, ...{ alignItems: \"center\" } }}\r\n        className=\"m-2\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control m-2\"\r\n          placeholder=\"Item\"\r\n          onChange={(event) =>\r\n            this.props.onChange(this.props.counter, event.target.value)\r\n          }\r\n        />\r\n        <span className={this.changeButtonClass()}>{this.formatted()}</span>\r\n        <button\r\n          className=\"btn btn-secondary btn-sm\"\r\n          onClick={() => this.props.onIncrease(this.props.counter)}>\r\n          Add\r\n        </button>\r\n        <button\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}>\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  changeButtonClass() {\r\n    let warnin = \"badge m-2 badge-\";\r\n    warnin += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return warnin;\r\n  }\r\n\r\n  formatted() {\r\n    const { value } = this.props.counter;\r\n    if (value === 0) {\r\n      return \"Zero\";\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  state = {\r\n    counters: [{ id: 1, value: 0, text: \"\" }],\r\n    existed: 1,\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"m-2\">Shopping list</h1>\r\n        <button\r\n          className=\"btn btn-primary btn-sm m-2\"\r\n          onClick={this.handleReset}>\r\n          Reset all Qty.\r\n        </button>\r\n        {this.state.counters.map((current) => (\r\n          <Counter\r\n            key={current.id}\r\n            onDelete={this.handleDelete}\r\n            counter={current}\r\n            onIncrease={this.handleIncrease}\r\n            onChange={this.handleChange}\r\n          />\r\n        ))}\r\n        <button className=\"btn btn-primary btn-sm m-2\" onClick={this.handleAdd}>\r\n          +\r\n        </button>\r\n        <br />\r\n        <button\r\n          className=\"btn btn-primary btn-sm btn-success m-2\"\r\n          onClick={this.handlePrint}>\r\n          Print\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleDelete = (counterId) => {\r\n    const updatedCounters = this.state.counters.filter(\r\n      (c) => c.id !== counterId\r\n    );\r\n    this.setState({ counters: updatedCounters });\r\n  };\r\n\r\n  handleIncrease = (counter) => {\r\n    const updatedCounters = [...this.state.counters];\r\n    const index = updatedCounters.indexOf(counter);\r\n    updatedCounters[index] = { ...counter };\r\n    updatedCounters[index].value++;\r\n    this.setState({ counters: updatedCounters });\r\n  };\r\n\r\n  handleReset = () => {\r\n    const updatedCounters = this.state.counters.map((c) => {\r\n      c.value = 0;\r\n      return c;\r\n    });\r\n    this.setState({ counters: updatedCounters });\r\n  };\r\n\r\n  handleAdd = () => {\r\n    const cexisted = this.state.existed;\r\n    const updatedCounters = [...this.state.counters];\r\n    updatedCounters.push({\r\n      id: cexisted + 1,\r\n      value: 0,\r\n    });\r\n    this.setState({ counters: updatedCounters, existed: cexisted + 1 });\r\n  };\r\n\r\n  handleChange = (changedCounter, text) => {\r\n    const updatedCounters = [...this.state.counters];\r\n    const index = updatedCounters.indexOf(changedCounter);\r\n    updatedCounters[index] = { ...changedCounter };\r\n    updatedCounters[index].text = text;\r\n    this.setState({ counters: updatedCounters });\r\n  };\r\n\r\n  handlePrint = () => {\r\n    const seperatorr = \"——————————————————————————————————————————\";\r\n    let finalArray = [\"Qty\\t|Item\\n\", seperatorr + \"\\n\"];\r\n    console.log(this.state.counters);\r\n    for (const currentCounter of this.state.counters) {\r\n      if (currentCounter.text && currentCounter.value) {\r\n        finalArray.push(\r\n          [currentCounter.value, \"\\t\", \"|\" + currentCounter.text, \"\\n\"].join(\"\")\r\n        );\r\n        finalArray.push(seperatorr + \"\\n\");\r\n      }\r\n    }\r\n    console.log(finalArray.join(\"\"));\r\n\r\n    var hiddenElement = document.createElement(\"a\");\r\n\r\n    hiddenElement.href =\r\n      \"data:attachment/text,\" + encodeURI(finalArray.join(\"\"));\r\n    hiddenElement.target = \"_blank\";\r\n    hiddenElement.download = \"ShoppingList.txt\";\r\n    hiddenElement.click();\r\n    hiddenElement.remove();\r\n  };\r\n}\r\n\r\nexport default Counters;\r\n","import React from \"react\";\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar />\n      <main className=\"container\">\n        <Counters />\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import Counters from \"./components/counters\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}